# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:52:36+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from pydantic import conint, constr

from models import Error, OrganicResult, ScrapeResult, SearchV1FieldsGetResponse

app = MCPProxy(
    contact={'x-twitter': 'internetarchive'},
    description="API for Internet Archive's Search-related services\n",
    title='Search Services',
    version='1.0.0',
    servers=[{'url': 'https://api.archive.org'}],
)


@app.get(
    '/search/v1/fields',
    description=""" Fields that can be requested """,
    tags=['search_operations'],
)
def get_search_v1_fields(callback: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/v1/organic',
    description=""" Return relevance-based results from search queries
 """,
    tags=['search_operations'],
)
def get_search_v1_organic(
    q: Optional[str] = None,
    field: Optional[constr(min_length=1, max_length=250)] = 'identifier',
    size: Optional[conint(ge=10, le=10000)] = 1000,
    total_only: Optional[bool] = False,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/v1/scrape',
    description=""" Scrape search results from Internet Archive, allowing a scrolling cursor
 """,
    tags=['search_operations'],
)
def get_search_v1_scrape(
    q: Optional[str] = None,
    field: Optional[constr(min_length=1, max_length=250)] = 'identifier',
    sort: Optional[constr(min_length=5, max_length=250)] = None,
    size: Optional[conint(ge=10, le=10000)] = 1000,
    cursor: Optional[str] = None,
    total_only: Optional[bool] = False,
    callback: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
